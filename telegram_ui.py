# telegram_ui.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from twisted.internet import reactor
from telegram.error import BadRequest

from state import app_state
from config import FOREX_SESSIONS, CRYPTO_PAIRS, STOCK_TICKERS, COMMODITIES, TRADING_HOURS
from analysis import get_api_detailed_signal_data
from utils_message_cleanup import bot_track_message, bot_clear_messages

logger = logging.getLogger(__name__)
EXPIRATIONS = ["1m", "5m"]

def _get_chat_id(update: Update) -> int:
    if update.effective_chat:
        return update.effective_chat.id
    if update.callback_query and update.callback_query.message:
        return update.callback_query.message.chat_id
    if update.effective_user:
        return update.effective_user.id
    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ chat_id –∑ update")
    return 0

def _safe_delete(bot, chat_id: int, message_id: int):
    try:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
    except BadRequest as e:
        logger.debug("safe_delete failed: %s (chat=%s mid=%s)", e, chat_id, message_id)
    except Exception:
        logger.exception("safe_delete unexpected error (chat=%s mid=%s)", chat_id, message_id)

def get_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton("–ú–ï–ù–Æ")]], resize_keyboard=True)

def get_main_menu_kb() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üíπ –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ (Forex)", callback_data="category_forex")],
        [InlineKeyboardButton("üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏", callback_data="category_crypto")],
        [InlineKeyboardButton("üìà –ê–∫—Ü—ñ—ó/–Ü–Ω–¥–µ–∫—Å–∏", callback_data="category_stocks")],
        [InlineKeyboardButton("ü•á –°–∏—Ä–æ–≤–∏–Ω–∞", callback_data="category_commodities")]
    ]
    scanner_map = {
        "forex": "üíπ Forex",
        "crypto": "üíé Crypto",
        "commodities": "ü•á –°–∏—Ä–æ–≤–∏–Ω–∞",
        "watchlist": "‚≠ê –û–±—Ä–∞–Ω–µ"
    }
    for key, text in scanner_map.items():
        is_enabled = app_state.get_scanner_state(key)
        status_icon = "‚úÖ" if is_enabled else "‚ùå"
        callback_data = f"toggle_scanner_{key}"
        keyboard.append([InlineKeyboardButton(f"{status_icon} –°–∫–∞–Ω–µ—Ä {text}", callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_expiration_kb(category: str) -> InlineKeyboardMarkup:
    kb = [[InlineKeyboardButton(exp, callback_data=f"exp_{category}_{exp}") for exp in EXPIRATIONS]]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="main_menu")])
    return InlineKeyboardMarkup(kb)

def get_forex_sessions_kb(expiration: str) -> InlineKeyboardMarkup:
    kb = []
    for session_name in FOREX_SESSIONS:
        text = f"{TRADING_HOURS.get(session_name, '')} {session_name}".strip()
        kb.append([InlineKeyboardButton(text, callback_data=f"session_forex_{expiration}_{session_name}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π", callback_data="category_forex")])
    return InlineKeyboardMarkup(kb)

def get_assets_kb(asset_list: list, category: str, expiration: str) -> InlineKeyboardMarkup:
    kb, row = [], []
    for asset in asset_list:
        cd = f"analyze_{expiration}_{asset.replace('/', '')}"
        row.append(InlineKeyboardButton(asset, callback_data=cd))
        if len(row) == 2:
            kb.append(row); row = []
    if row:
        kb.append(row)
    back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–µ—Å—ñ–π" if category == 'forex' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π"
    cd_back = f"exp_forex_{expiration}" if category == 'forex' else f"category_{category}"
    kb.append([InlineKeyboardButton(back, callback_data=cd_back)])
    return InlineKeyboardMarkup(kb)

def start(update: Update, context: CallbackContext) -> None:
    chat_id = _get_chat_id(update)
    if not chat_id:
        return
    sent = update.message.reply_text("üëã –í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ú–ï–ù–Æ¬ª –¥–ª—è –≤–∏–±–æ—Ä—É –∞–∫—Ç–∏–≤—ñ–≤.", reply_markup=get_reply_keyboard())
    bot_track_message(context.bot_data, chat_id, sent.message_id)

def menu(update: Update, context: CallbackContext) -> None:
    chat_id = _get_chat_id(update)
    if not chat_id:
        return

    # –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É dispatcher (context.bot_data)
    try:
        bot_clear_messages(context.bot, context.bot_data, chat_id, limit=100)
    except Exception:
        logger.exception("bot_clear_messages(context.bot) failed")

    # –Ø–∫—â–æ —î —ñ–Ω—à–∏–π dispatcher (app_state.updater), –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ –π–æ–≥–æ tracked (scanner –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if app_state.updater:
        try:
            other_bot_data = getattr(app_state.updater.dispatcher, "bot_data", None)
            if other_bot_data is not None:
                bot_clear_messages(app_state.updater.bot, other_bot_data, chat_id, limit=100)
        except Exception:
            logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ app_state.updater.dispatcher.bot_data")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (inline) —ñ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ
    sent = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
    bot_track_message(context.bot_data, chat_id, sent.message_id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É "–ú–ï–ù–Æ" —É –≤–∏–≥–ª—è–¥—ñ reply keyboard, —â–æ–± –∫–Ω–æ–ø–∫–∞ –∑–∞–ª–∏—à–∞–ª–∞—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ—é
    try:
        kb_msg = context.bot.send_message(chat_id, "üìã –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ú–ï–ù–Æ¬ª.", reply_markup=get_reply_keyboard())
        bot_track_message(context.bot_data, chat_id, kb_msg.message_id)
    except Exception:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ reply keyboard –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è")

def reset_ui(update: Update, context: CallbackContext) -> None:
    chat_id = _get_chat_id(update)
    if not chat_id:
        return
    sent = update.message.reply_text(f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{update.message.text}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=get_reply_keyboard())
    bot_track_message(context.bot_data, chat_id, sent.message_id)

def symbols_command(update: Update, context: CallbackContext):
    chat_id = _get_chat_id(update)
    if not chat_id:
        return

    if not app_state.SYMBOLS_LOADED or not hasattr(app_state, 'all_symbol_names'):
        sent_msg = update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
        bot_track_message(context.bot_data, chat_id, sent_msg.message_id)
        return

    forex = sorted([s for s in app_state.all_symbol_names if "/" in s and len(s) < 8 and "USD" not in s.upper()])
    crypto_usd = sorted([s for s in app_state.all_symbol_names if "/USD" in s.upper()])
    crypto_usdt = sorted([s for s in app_state.all_symbol_names if "/USDT" in s.upper()])
    others = sorted([s for s in app_state.all_symbol_names if "/" not in s])
    message = "**–î–æ—Å—Ç—É–ø–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞:**\n\n"
    if forex:
        message += f"**Forex:**\n`{', '.join(forex)}`\n\n"
    if crypto_usd:
        message += f"**Crypto (USD):**\n`{', '.join(crypto_usd)}`\n\n"
    if crypto_usdt:
        message += f"**Crypto (USDT):**\n`{', '.join(crypto_usdt)}`\n\n"
    if others:
        message += f"**Indices/Stocks/Commodities:**\n`{', '.join(others)}`"

    for i in range(0, len(message), 4096):
        sent_msg = update.message.reply_text(message[i:i + 4096], parse_mode='Markdown')
        bot_track_message(context.bot_data, chat_id, sent_msg.message_id)

def _format_signal_message(result: dict, expiration: str) -> str:
    if result.get("error"):
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}"
    pair = result.get('pair', 'N/A')
    price = result.get('price')
    verdict = result.get('verdict_text', '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏.')
    price_str = f"{price:.5f}" if price and price > 0 else "N/A"
    parts = [f"üìà *–°–∏–≥–Ω–∞–ª –¥–ª—è {pair} (–ï–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è: {expiration})*"]
    parts.append(f"**–ü—Ä–æ–≥–Ω–æ–∑:** {verdict}")
    parts.append(f"**–¶—ñ–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª—É:** `{price_str}`")
    reasons = result.get('reasons', [])
    if reasons:
        parts.append("\nüìë **–§–∞–∫—Ç–æ—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É:**\n" + "\n".join([f"‚Ä¢ _{r}_" for r in reasons]))
    return "\n".join(parts)

def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if not query:
        return
    query.answer()
    chat_id = _get_chat_id(update)
    if not chat_id:
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é (—â–æ–± –Ω–µ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª–æ—Å—è)
    try:
        _safe_delete(context.bot, chat_id, query.message.message_id)
    except Exception:
        logger.exception("Failed to delete query message")

    data = (query.data or "")
    parts = data.split('_')
    action = parts[0]
    sent_msg = None

    if action == "toggle" and len(parts) > 1 and parts[1] == "scanner":
        if len(parts) > 2:
            category = parts[2]
            if category in app_state.SCANNER_STATE:
                new_state = not app_state.get_scanner_state(category)
                app_state.set_scanner_state(category, new_state)
        sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    elif action == "main":
        sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    elif action == "category":
        category = parts[1]
        sent_msg = context.bot.send_message(chat_id, f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—ó –¥–ª—è '{category}':", reply_markup=get_expiration_kb(category))

    elif action == "exp":
        _, category, expiration = parts
        if category == 'forex':
            sent_msg = context.bot.send_message(chat_id, "üíπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—É —Å–µ—Å—ñ—é:", reply_markup=get_forex_sessions_kb(expiration))
        else:
            asset_map = {'crypto': CRYPTO_PAIRS, 'stocks': STOCK_TICKERS, 'commodities': COMMODITIES}
            sent_msg = context.bot.send_message(chat_id, f"–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤:", reply_markup=get_assets_kb(asset_map.get(category, []), category, expiration))

    elif action == "session":
        _, category, expiration, session_name = parts
        pairs = FOREX_SESSIONS.get(session_name, [])
        sent_msg = context.bot.send_message(chat_id, f"–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}':", reply_markup=get_assets_kb(pairs, category, expiration))

    elif action == "analyze":
        _, expiration, symbol = parts
        if not app_state.client or not app_state.SYMBOLS_LOADED:
            query.answer(text="‚ùå –°–µ—Ä–≤—ñ—Å —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
            sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            bot_track_message(context.bot_data, chat_id, sent_msg.message_id)
            return

        loading_msg = context.bot.send_message(chat_id, text=f"‚è≥ –û–±—Ä–∞–Ω–æ {symbol} (–µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è {expiration}). –†–æ–±–ª—é –∑–∞–ø–∏—Ç...")
        bot_track_message(context.bot_data, chat_id, loading_msg.message_id)

        def on_success(result):
            try:
                _safe_delete(context.bot, chat_id, loading_msg.message_id)
            except Exception:
                logger.debug("loading_msg delete failed")

            app_state.cache_signal(symbol, expiration, result)
            msg = _format_signal_message(result, expiration)

            sent_signal = context.bot.send_message(chat_id, text=msg, parse_mode='Markdown')
            bot_track_message(context.bot_data, chat_id, sent_signal.message_id)

            sent_menu = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            bot_track_message(context.bot_data, chat_id, sent_menu.message_id)

        def on_error(failure):
            try:
                _safe_delete(context.bot, chat_id, loading_msg.message_id)
            except Exception:
                pass
            error = failure.getErrorMessage() if hasattr(failure, 'getErrorMessage') else str(failure)
            logger.error("Error getting signal for %s: %s", symbol, error)
            sent_err = context.bot.send_message(chat_id, text=f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {error}")
            bot_track_message(context.bot_data, chat_id, sent_err.message_id)
            sent_menu = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            bot_track_message(context.bot_data, chat_id, sent_menu.message_id)

        def do_analysis():
            d = get_api_detailed_signal_data(app_state.client, app_state.symbol_cache, symbol, query.from_user.id, timeframe=expiration)
            d.addCallbacks(on_success, on_error)

        reactor.callLater(0, do_analysis)

    if sent_msg:
        bot_track_message(context.bot_data, chat_id, sent_msg.message_id)
