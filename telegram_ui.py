import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from telegram.error import BadRequest
from twisted.internet import reactor

from state import app_state
from config import FOREX_SESSIONS, CRYPTO_PAIRS, STOCK_TICKERS, COMMODITIES, TRADING_HOURS
from analysis import get_api_detailed_signal_data
from utils_message_cleanup import bot_track_message, bot_clear_messages

logger = logging.getLogger(__name__)

EXPIRATIONS = ["1m", "5m"]

def get_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton("–ú–ï–ù–Æ")]], resize_keyboard=True)

def get_main_menu_kb() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üíπ –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ (Forex)", callback_data="category_forex")],
        [InlineKeyboardButton("üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏", callback_data="category_crypto")],
        [InlineKeyboardButton("üìà –ê–∫—Ü—ñ—ó/–Ü–Ω–¥–µ–∫—Å–∏", callback_data="category_stocks")],
        [InlineKeyboardButton("ü•á –°–∏—Ä–æ–≤–∏–Ω–∞", callback_data="category_commodities")]
    ]
    scanner_map = {
        "forex": "üíπ Forex", "crypto": "üíé Crypto",
        "commodities": "ü•á –°–∏—Ä–æ–≤–∏–Ω–∞", "watchlist": "‚≠ê –û–±—Ä–∞–Ω–µ"
    }
    for key, text in scanner_map.items():
        is_enabled = app_state.get_scanner_state(key)
        status_icon = "‚úÖ" if is_enabled else "‚ùå"
        callback_data = f"toggle_scanner_{key}"
        keyboard.append([InlineKeyboardButton(f"{status_icon} –°–∫–∞–Ω–µ—Ä {text}", callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_expiration_kb(category: str) -> InlineKeyboardMarkup:
    kb = [[InlineKeyboardButton(exp, callback_data=f"exp_{category}_{exp}") for exp in EXPIRATIONS]]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="main_menu")])
    return InlineKeyboardMarkup(kb)

def get_forex_sessions_kb(expiration: str) -> InlineKeyboardMarkup:
    kb = []
    for session_name in FOREX_SESSIONS:
        text = f"{TRADING_HOURS.get(session_name, '')} {session_name}".strip()
        kb.append([InlineKeyboardButton(text, callback_data=f"session_forex_{expiration}_{session_name}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π", callback_data="category_forex")])
    return InlineKeyboardMarkup(kb)

def get_assets_kb(asset_list: list, category: str, expiration: str) -> InlineKeyboardMarkup:
    kb, row = [], []
    for asset in asset_list:
        cd = f"analyze_{expiration}_{asset.replace('/', '')}"
        row.append(InlineKeyboardButton(asset, callback_data=cd))
        if len(row) == 2:
            kb.append(row)
            row = []
    if row: kb.append(row)
    back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–µ—Å—ñ–π" if category == 'forex' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π"
    cd_back = f"exp_forex_{expiration}" if category == 'forex' else f"category_{category}"
    kb.append([InlineKeyboardButton(back, callback_data=cd_back)])
    return InlineKeyboardMarkup(kb)

def start(update: Update, context: CallbackContext) -> None:
    sent = update.message.reply_text("üëã –í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ú–ï–ù–Æ¬ª –¥–ª—è –≤–∏–±–æ—Ä—É –∞–∫—Ç–∏–≤—ñ–≤.",
                                     reply_markup=get_reply_keyboard())
    bot_track_message(context.bot_data, update.effective_chat.id, sent.message_id)

def menu(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    bot_clear_messages(context.bot, context.bot_data, chat_id, limit=100)
    sent = update.message.reply_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
    bot_track_message(context.bot_data, chat_id, sent.message_id)

def reset_ui(update: Update, context: CallbackContext) -> None:
    sent = update.message.reply_text(
        f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{update.message.text}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
        reply_markup=get_reply_keyboard()
    )
    bot_track_message(context.bot_data, update.effective_chat.id, sent.message_id)

def symbols_command(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not app_state.SYMBOLS_LOADED or not hasattr(app_state, 'all_symbol_names'):
        sent = update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
        bot_track_message(context.bot_data, chat_id, sent.message_id)
        return

    forex = sorted([s for s in app_state.all_symbol_names if "/" in s and len(s) < 8 and "USD" not in s.upper()])
    crypto_usd = sorted([s for s in app_state.all_symbol_names if "/USD" in s.upper()])
    crypto_usdt = sorted([s for s in app_state.all_symbol_names if "/USDT" in s.upper()])
    others = sorted([s for s in app_state.all_symbol_names if "/" not in s])
    message = "**–î–æ—Å—Ç—É–ø–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞:**\n\n"
    if forex: message += f"**Forex:**\n`{', '.join(forex)}`\n\n"
    if crypto_usd: message += f"**Crypto (USD):**\n`{', '.join(crypto_usd)}`\n\n"
    if crypto_usdt: message += f"**Crypto (USDT):**\n`{', '.join(crypto_usdt)}`\n\n"
    if others: message += f"**Indices/Stocks/Commodities:**\n`{', '.join(others)}`"
    for i in range(0, len(message), 4096):
        sent = update.message.reply_text(message[i:i + 4096], parse_mode='Markdown')
        bot_track_message(context.bot_data, chat_id, sent.message_id)

def _format_signal_message(result: dict, expiration: str) -> str:
    if result.get("error"):
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}"
    pair = result.get('pair', 'N/A')
    price = result.get('price')
    verdict = result.get('verdict_text', '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏.')
    price_str = f"{price:.5f}" if price and price > 0 else "N/A"
    parts = [f"üìà *–°–∏–≥–Ω–∞–ª –¥–ª—è {pair} (–ï–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è: {expiration})*",
             f"**–ü—Ä–æ–≥–Ω–æ–∑:** {verdict}",
             f"**–¶—ñ–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª—É:** `{price_str}`"]
    reasons = result.get('reasons', [])
    if reasons:
        parts.append(f"\nüìë **–§–∞–∫—Ç–æ—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É:**\n" + "\n".join([f"‚Ä¢ _{r}_" for r in reasons]))
    return "\n".join(parts)

def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    data = query.data
    context.user_data['last_menu_id'] = query.message.message_id
    parts = data.split('_')
    action = parts[0]

    if action == "toggle" and parts[1] == "scanner":
        if len(parts) > 2:
            category = parts[2]
            if category in app_state.SCANNER_STATE:
                new_state = not app_state.get_scanner_state(category)
                app_state.set_scanner_state(category, new_state)
                query.edit_message_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            return

    if action == "main":
        query.edit_message_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    elif action == "category":
        category = parts[1]
        query.edit_message_text(f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—ó –¥–ª—è '{category}':", reply_markup=get_expiration_kb(category))

    elif action == "exp":
        _, category, expiration = parts
        if category == 'forex':
            query.edit_message_text("üíπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—É —Å–µ—Å—ñ—é:", reply_markup=get_forex_sessions_kb(expiration))
        else:
            asset_map = {'crypto': CRYPTO_PAIRS, 'stocks': STOCK_TICKERS, 'commodities': COMMODITIES}
            query.edit_message_text(f"–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤:", reply_markup=get_assets_kb(asset_map.get(category, []), category, expiration))

    elif action == "session":
        _, category, expiration, session_name = parts
        pairs = FOREX_SESSIONS.get(session_name, [])
        query.edit_message_text(f"–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}':", reply_markup=get_assets_kb(pairs, category, expiration))

    elif action == "analyze":
        _, expiration, symbol = parts
        if not app_state.client or not app_state.SYMBOLS_LOADED:
            query.answer(text="‚ùå –°–µ—Ä–≤—ñ—Å —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
            return
        query.edit_message_text(text=f"‚è≥ –û–±—Ä–∞–Ω–æ {symbol} (–µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è {expiration}). –†–æ–±–ª—é –∑–∞–ø–∏—Ç...")

        def on_success(result):
            msg = _format_signal_message(result, expiration)
            sent = query.edit_message_text(text=msg, parse_mode='Markdown', reply_markup=get_main_menu_kb())
            bot_track_message(context.bot_data, query.message.chat.id, sent.message_id)

        def on_error(failure):
            error = str(failure)
            chat_id = query.message.chat.id
            context.bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
            sent_menu = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            bot_track_message(context.bot_data, chat_id, sent_menu.message_id)

        reactor.callLater(0, lambda: get_api_detailed_signal_data(
            app_state.client, app_state.symbol_cache, symbol, query.from_user.id, timeframe=expiration
        ).addCallbacks(on_success, on_error))
