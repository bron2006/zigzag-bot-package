# telegram_ui.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Message
from telegram.ext import CallbackContext
from twisted.internet import reactor
from telegram.error import BadRequest

from state import app_state
from config import FOREX_SESSIONS, CRYPTO_PAIRS, STOCK_TICKERS, COMMODITIES, TRADING_HOURS
from analysis import get_api_detailed_signal_data

logger = logging.getLogger(__name__)

EXPIRATIONS = ["1m", "5m"]

# --- –ü–û–ß–ê–¢–û–ö –ö–û–î–£ –í–Ü–î –ï–ö–°–ü–ï–†–¢–ê ---

def _get_chat_id(update: Update) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î chat_id –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, message —á–∏ callback_query."""
    if update.effective_chat:
        return update.effective_chat.id
    if update.effective_user:
        return update.effective_user.id
    # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è callback_query –±–µ–∑ effective_chat
    if update.callback_query and update.callback_query.message:
        return update.callback_query.message.chat_id
    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ chat_id –∑ update", extra={"update": update.to_dict()})
    raise RuntimeError("–ù–µ–º–∞—î chat_id –≤ update")

def _safe_delete(bot, chat_id: int, message_id: int):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫."""
    try:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
    except BadRequest as e:
        # –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–∑–º—ñ–Ω–∏–º–æ –Ω–∞ warning, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ –≤ debug)
        logger.warning("safe_delete failed: %s (chat=%s mid=%s)", e, chat_id, message_id)
    except Exception as e:
        logger.error("Unexpected error in _safe_delete: %s", e, exc_info=True)

def track_message(context: CallbackContext, message: Message):
    """–ó–±–µ—Ä—ñ–≥–∞—î ID —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è."""
    if not message: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ message –Ω–µ None
        return
    if 'sent_messages' not in context.user_data:
        context.user_data['sent_messages'] = []
    context.user_data['sent_messages'].append(message.message_id)
    # –æ–±–º–µ–∂—É—î–º–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
    if len(context.user_data['sent_messages']) > 100:
        context.user_data['sent_messages'] = context.user_data['sent_messages'][-100:]

def clear_bot_messages(update: Update, context: CallbackContext, limit: int = 20):
    """–í–∏–¥–∞–ª—è—î –¥–æ `limit` –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –±–æ—Ç–æ–º."""
    chat_id = _get_chat_id(update)
    stored = context.user_data.get('sent_messages', [])
    if not stored:
        logger.debug("clear_bot_messages: –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    
    to_delete = stored[-limit:]
    logger.debug(f"clear_bot_messages: –ù–∞–º–∞–≥–∞—é—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {len(to_delete)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
    
    for mid in to_delete:
        _safe_delete(context.bot, chat_id, mid)
    
    # –≤–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ —Å–ø—Ä–æ–±—É–≤–∞–ª–∏ –≤–∏–¥–∞–ª–∏—Ç–∏
    context.user_data['sent_messages'] = [mid for mid in stored if mid not in to_delete]

# --- –ö–Ü–ù–ï–¶–¨ –ö–û–î–£ –í–Ü–î –ï–ö–°–ü–ï–†–¢–ê ---


# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–ë–µ–∑ –∑–º—ñ–Ω) ---

def get_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton("–ú–ï–ù–Æ")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_main_menu_kb() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üíπ –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ (Forex)", callback_data="category_forex")],
        [InlineKeyboardButton("üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏", callback_data="category_crypto")],
        [InlineKeyboardButton("üìà –ê–∫—Ü—ñ—ó/–Ü–Ω–¥–µ–∫—Å–∏", callback_data="category_stocks")],
        [InlineKeyboardButton("ü•á –°–∏—Ä–æ–≤–∏–Ω–∞", callback_data="category_commodities")]
    ]
    
    scanner_map = {
        "forex": "üíπ Forex",
        "crypto": "üíé Crypto",
        "commodities": "ü•á –°–∏—Ä–æ–≤–∏–Ω–∞",
        "watchlist": "‚≠ê –û–±—Ä–∞–Ω–µ"
    }

    for key, text in scanner_map.items():
        is_enabled = app_state.get_scanner_state(key)
        status_icon = "‚úÖ" if is_enabled else "‚ùå"
        button_text = f"{status_icon} –°–∫–∞–Ω–µ—Ä {text}"
        callback_data = f"toggle_scanner_{key}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
    return InlineKeyboardMarkup(keyboard)

def get_expiration_kb(category: str) -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(exp, callback_data=f"exp_{category}_{exp}") for exp in EXPIRATIONS]]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_forex_sessions_kb(expiration: str) -> InlineKeyboardMarkup:
    keyboard = []
    for session_name in FOREX_SESSIONS:
        display_text = f"{TRADING_HOURS.get(session_name, '')} {session_name}".strip()
        keyboard.append([InlineKeyboardButton(display_text, callback_data=f"session_forex_{expiration}_{session_name}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π", callback_data="category_forex")])
    return InlineKeyboardMarkup(keyboard)

def get_assets_kb(asset_list: list, category: str, expiration: str) -> InlineKeyboardMarkup:
    keyboard, row = [], []
    for asset in asset_list:
        callback_data = f"analyze_{expiration}_{asset.replace('/', '')}"
        row.append(InlineKeyboardButton(asset, callback_data=callback_data))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row: keyboard.append(row)
    if category == 'forex':
         keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–µ—Å—ñ–π", callback_data=f"exp_forex_{expiration}")])
    else:
         keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ–π", callback_data=f"category_{category}")])
    return InlineKeyboardMarkup(keyboard)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ (–ü–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ –∑ –ª–æ–≥—ñ–∫–æ—é –ï–∫—Å–ø–µ—Ä—Ç–∞) ---

def start(update: Update, context: CallbackContext) -> None:
    sent = update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ú–ï–ù–Æ¬ª –¥–ª—è –≤–∏–±–æ—Ä—É –∞–∫—Ç–∏–≤—ñ–≤.",
        reply_markup=get_reply_keyboard()
    )
    # –ù–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, —â–æ–± –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏ –π–æ–≥–æ

def menu(update: Update, context: CallbackContext) -> None:
    # 1. –ê–≥—Ä–µ—Å–∏–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
    clear_bot_messages(update, context, limit=50) # –í–∏–¥–∞–ª—è—î–º–æ –¥–æ 50 —Å—Ç–∞—Ä–∏—Ö

    # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é
    sent_message = update.message.reply_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    # 3. –†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é
    track_message(context, sent_message)

def reset_ui(update: Update, context: CallbackContext) -> None:
    sent_message = update.message.reply_text(
        f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{update.message.text}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
        reply_markup=get_reply_keyboard()
    )
    track_message(context, sent_message) # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ

def symbols_command(update: Update, context: CallbackContext):
    if not app_state.SYMBOLS_LOADED or not hasattr(app_state, 'all_symbol_names'):
        sent_msg = update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
        track_message(context, sent_msg)
        return
    
    forex = sorted([s for s in app_state.all_symbol_names if "/" in s and len(s) < 8 and "USD" not in s.upper()])
    crypto_usd = sorted([s for s in app_state.all_symbol_names if "/USD" in s.upper()])
    crypto_usdt = sorted([s for s in app_state.all_symbol_names if "/USDT" in s.upper()])
    others = sorted([s for s in app_state.all_symbol_names if "/" not in s])
    message = "**–î–æ—Å—Ç—É–ø–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞:**\n\n"
    if forex: message += f"**Forex:**\n`{', '.join(forex)}`\n\n"
    if crypto_usd: message += f"**Crypto (USD):**\n`{', '.join(crypto_usd)}`\n\n"
    if crypto_usdt: message += f"**Crypto (USDT):**\n`{', '.join(crypto_usdt)}`\n\n"
    if others: message += f"**Indices/Stocks/Commodities:**\n`{', '.join(others)}`"
    
    for i in range(0, len(message), 4096):
        sent_msg = update.message.reply_text(message[i:i + 4096], parse_mode='Markdown')
        track_message(context, sent_msg) # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ

def _format_signal_message(result: dict, expiration: str) -> str:
    if result.get("error"):
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}"
    pair = result.get('pair', 'N/A')
    price = result.get('price')
    verdict = result.get('verdict_text', '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏.')
    price_str = f"{price:.5f}" if price and price > 0 else "N/A"
    
    parts = []
    parts.append(f"üìà *–°–∏–≥–Ω–∞–ª –¥–ª—è {pair} (–ï–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è: {expiration})*")
    parts.append(f"**–ü—Ä–æ–≥–Ω–æ–∑:** {verdict}")
    parts.append(f"**–¶—ñ–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª—É:** `{price_str}`")
    reasons = result.get('reasons', [])
    if reasons:
        parts.append(f"\nüìë **–§–∞–∫—Ç–æ—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É:**\n" + "\n".join([f"‚Ä¢ _{r}_" for r in reasons]))
    return "\n".join(parts)


def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if not query:
        logger.warning("button_handler –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –±–µ–∑ query")
        return
        
    query.answer()
    data = query.data or ""
    chat_id = _get_chat_id(update)
    
    # --- –õ–û–ì–Ü–ö–ê –ï–ö–°–ü–ï–†–¢–ê: –ó–∞–≤–∂–¥–∏ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ---
    try:
        query.delete_message()
    except Exception as e:
        logger.debug("query.delete_message failed: %s", e)
    # --- –ö–Ü–ù–ï–¶–¨ ---

    parts = data.split('_')
    action = parts[0]
    sent_msg = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è

    if action == "toggle" and parts[1] == "scanner":
        if len(parts) > 2:
            category = parts[2]
            if category in app_state.SCANNER_STATE:
                new_state = not app_state.get_scanner_state(category)
                app_state.set_scanner_state(category, new_state)
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é (–∑–∞–º—ñ—Å—Ç—å edit)
        sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    elif action == "main":
        sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

    elif action == "category":
        category = parts[1]
        sent_msg = context.bot.send_message(chat_id, f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—ó –¥–ª—è '{category}':", reply_markup=get_expiration_kb(category))

    elif action == "exp":
        _, category, expiration = parts
        if category == 'forex':
            sent_msg = context.bot.send_message(chat_id, "üíπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—É —Å–µ—Å—ñ—é:", reply_markup=get_forex_sessions_kb(expiration))
        else:
            asset_map = {'crypto': CRYPTO_PAIRS, 'stocks': STOCK_TICKERS, 'commodities': COMMODITIES}
            sent_msg = context.bot.send_message(chat_id, f"–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤:", reply_markup=get_assets_kb(asset_map.get(category, []), category, expiration))

    elif action == "session":
        _, category, expiration, session_name = parts
        pairs = FOREX_SESSIONS.get(session_name, [])
        sent_msg = context.bot.send_message(chat_id, f"–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}':", reply_markup=get_assets_kb(pairs, category, expiration))

    elif action == "analyze":
        _, expiration, symbol = parts
        if not app_state.client or not app_state.SYMBOLS_LOADED:
            query.answer(text="‚ùå –°–µ—Ä–≤—ñ—Å —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
            sent_msg = context.bot.send_message(chat_id, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())
            track_message(context, sent_msg) # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –º–µ–Ω—é, –Ω–∞ —è–∫–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è
            return
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" —ñ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ
        loading_msg = context.bot.send_message(chat_id, text=f"‚è≥ –û–±—Ä–∞–Ω–æ {symbol} (–µ–∫—Å–ø—ñ—Ä–∞—Ü—ñ—è {expiration}). –†–æ–±–ª—é –∑–∞–ø–∏—Ç...")
        track_message(context, loading_msg)

        def on_success(result):
            _safe_delete(context.bot, chat_id, loading_msg.message_id) # –í–∏–¥–∞–ª—è—î–º–æ "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."
            
            app_state.cache_signal(symbol, expiration, result)
            msg = _format_signal_message(result, expiration)
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ
            sent_signal = context.bot.send_message(chat_id, text=msg, parse_mode='Markdown')
            track_message(context, sent_signal)

        def on_error(failure):
            _safe_delete(context.bot, chat_id, loading_msg.message_id) # –í–∏–¥–∞–ª—è—î–º–æ "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."

            error = failure.getErrorMessage() if hasattr(failure, 'getErrorMessage') else str(failure)
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {symbol}: {error}")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–º–∏–ª–∫—É —ñ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ
            sent_error = context.bot.send_message(chat_id, text=f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {error}")
            track_message(context, sent_error)

        def do_analysis():
            d = get_api_detailed_signal_data(app_state.client, app_state.symbol_cache, symbol, query.from_user.id, timeframe=expiration)
            d.addCallbacks(on_success, on_error)

        reactor.callLater(0, do_analysis)
        # sent_msg —Ç—É—Ç None, –±–æ –º–∏ –≤–∂–µ –≤—ñ–¥—Å—Ç–µ–∂–∏–ª–∏ loading_msg
    
    # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤ —Ü—å–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ
    if sent_msg:
        track_message(context, sent_msg)